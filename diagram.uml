@startuml

class Student {
  + NO_OF_MIDTERMS: int = 3
  - first_name: string
  - last_name: string
  - midterm_grades: int[3]
  - age: int
  --
  + Student()
  + Student(fname_: string, lname_: string, mt_grades_: int[3], age_: int)
  + get_full_name(): string
  + get_names(): pair<string, string>
  + grade_average(): int
  + is_failing(): bool
  + is_passing(): bool
  + is_underage(): bool
  + to_pretty_string(): string
  + to_csv_line(): string
}

class Classroom {
  - students: vector<Student>
  --
  + Classroom()
  + Classroom(students_: vector<Student>)
  + get_student_list(): vector<Student>
  + add_student(s_: Student): void
  + matching_names(name_to_match: string): vector<size_t>
  + remove_student(pos_: size_t): void
  + top_student(): Student
  + failing_students(): vector<Student>
}

class CSV_Grades {
  - HEADER: string = "Nombre,Apellido,Parcial1,Parcial2,Parcial3,Edad"
  - in: ifstream
  - out: ofstream
  - opened_file_to_read: string
  - opened_file_to_write: string
  --
  + CSV_Grades()
  + get_opened_file_read(): string
  + get_opened_file_write(): string
  + open_file_to_read(filename_read_: string): bool
  + open_file_to_write(filename_write_: string): bool
  + open_file_to_overwrite(filename_overwrite_: string): bool
  + read_students_from_file(): vector<Student>
  + write_header_to_file(): void
  + write_student_to_file(s_: Student): void
  + update_file(s_list: vector<Student>): void
  + end_file_read(): void
  + end_file_write(): void
  - my_stoi(s_: string): int
  - parse_line(line_: string): Student
}

class Menu {
  - user_choice: int
  - students_are_loaded: bool
  - original_filename: string
  - csv_handler: CSV_Grades
  - classroom: Classroom
  --
  + Menu()
  - load_file(): void
  - print_grades(): void
  - general_info(): void
  - show_failing_students(): void
  - add_new_student(): void
  - remove_student(): void
}

Menu --> CSV_Grades : usa a
Menu --> Classroom : usa a
Classroom --> Student : contiene
CSV_Grades --> Student : crea/escribe

@enduml